{
  "swagger": "2.0",
  "info": {
    "title": "Service Catalog Management",
    "description": "This is Swagger UI environment generated for the TMF Service Catalog Management specification",
    "version": "2.1"
  },
  "host": "biologeek.orange-labs.fr",
  "basePath": "/tmf-api/serviceCatalogManagement",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/serviceCatalog": {
      "get": {
        "operationId": "listServiceCatalog",
        "summary": "List or find 'ServiceCatalog' objects",
        "tags": [
          "serviceCatalog"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "name",
            "description": "For filtering: Name of the catalog"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@type",
            "description": "For filtering: Indicates the (class) type of catalog. For service catalogs, this will be 'ServiceCatalog'."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@schemaLocation",
            "description": "For filtering: This field provides a link to the schema describing this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@baseType",
            "description": "For filtering: Indicates<b> </b>the base (class) type of this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "version",
            "description": "For filtering: Catalog version"
          },
          {
            "name": "validFor.startDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, starting at the TimePeriod"
          },
          {
            "name": "validFor.endDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, ending at the TimePeriod."
          },
          {
            "name": "lastUpdate",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: Date and time of the last update"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "lifecycleStatus",
            "description": "For filtering: Used to indicate the current lifecycle status"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/ServiceCatalog"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/serviceCatalog/{id}": {
      "get": {
        "operationId": "retrieveServiceCatalog",
        "summary": "Retrieves a 'ServiceCatalog' by Id",
        "tags": [
          "serviceCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Service Catalog"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/ServiceCatalog"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/serviceCategory": {
      "get": {
        "operationId": "listServiceCategory",
        "summary": "List or find 'ServiceCategory' objects",
        "tags": [
          "serviceCategory"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "name",
            "description": "For filtering: Name of the category"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@type",
            "description": "For filtering: The (class) type of this category"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@schemalLocation",
            "description": "For filtering: This field provides a link to the schema describing this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@baseType",
            "description": "For filtering: Immediate base class type of this category"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "version",
            "description": "For filtering: Category version"
          },
          {
            "name": "validFor.startDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, starting at the TimePeriod"
          },
          {
            "name": "validFor.endDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, ending at the TimePeriod."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "lifecycleStatus",
            "description": "For filtering: Used to indicate the current lifecycle status"
          },
          {
            "name": "lastUpdate",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: Date and time of the last update"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "parentId",
            "description": "For filtering: Unique identifier of the parent category"
          },
          {
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "isRoot",
            "description": "For filtering: If true, this Boolean indicates that the category is a root of categories"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "relatedParty.role",
            "description": "For filtering: Role of the related party."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "relatedParty.name",
            "description": "For filtering: Name of the related party"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "serviceCandidate.version",
            "description": "For filtering: ServiceCandidate version"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "serviceCandidate.name",
            "description": "For filtering: Name given to the ServiceCandidate"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "serviceCandidate.@type",
            "description": "For filtering: The (class) type of the ServiceCandidate"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "category.version",
            "description": "For filtering: Category version"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "category.name",
            "description": "For filtering: Name of the category"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "category.@type",
            "description": "For filtering: the class type of the category"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/ServiceCategory"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/serviceCategory/{id}": {
      "get": {
        "operationId": "retrieveServiceCategory",
        "summary": "Retrieves a 'ServiceCategory' by Id",
        "tags": [
          "serviceCategory"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Service Category"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/ServiceCategory"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/serviceCandidate": {
      "get": {
        "operationId": "listServiceCandidate",
        "summary": "List or find 'ServiceCandidate' objects",
        "tags": [
          "serviceCandidate"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "name",
            "description": "For filtering: Name given to this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@type",
            "description": "For filtering: Class type of this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@schemaLocation",
            "description": "For filtering: This field provides a link to the schema describing this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@baseType",
            "description": "For filtering: The (immediate) base class type of this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "version",
            "description": "For filtering: the version of service candidate"
          },
          {
            "name": "validFor.startDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, starting at the TimePeriod"
          },
          {
            "name": "validFor.endDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, ending at the TimePeriod."
          },
          {
            "name": "lastUpdate",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: Date and time of the last update of this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "lifecycleStatus",
            "description": "For filtering: Used to indicate the current lifecycle status of the service candidate."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "category.version",
            "description": "For filtering: Category version"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "category.name",
            "description": "For filtering: Name of the category"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "category.@type",
            "description": "For filtering: the class type of the category"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "serviceSpecification.version",
            "description": "For filtering: ServiceSpecification version"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "serviceSpecification.name",
            "description": "For filtering: Name given to the ServiceSpecification"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "serviceSpecification.@type",
            "description": "For filtering: The (class) type of the ServiceSpecification"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/ServiceCandidate"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/serviceCandidate/{id}": {
      "get": {
        "operationId": "retrieveServiceCandidate",
        "summary": "Retrieves a 'ServiceCandidate' by Id",
        "tags": [
          "serviceCandidate"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Service Candidate"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/ServiceCandidate"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/serviceSpecification": {
      "get": {
        "operationId": "listServiceSpecification",
        "summary": "List or find 'ServiceSpecification' objects",
        "tags": [
          "serviceSpecification"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "name",
            "description": "For filtering: Name given to this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@type",
            "description": "For filtering: Class type of this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@schemaLocation",
            "description": "For filtering: This field provides a link to the schema describing this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@baseType",
            "description": "For filtering: The (immediate) base class type of this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "version",
            "description": "For filtering: Service specification version"
          },
          {
            "name": "validFor.startDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, starting at the TimePeriod"
          },
          {
            "name": "validFor.endDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, ending at the TimePeriod."
          },
          {
            "name": "lastUpdate",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: Date and time of the last update of this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "lifecycleStatus",
            "description": "For filtering: Used to indicate the current lifecycle status of the service specification"
          },
          {
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "isBundle",
            "description": "For filtering: A flag indicates that if this service specification is a bundled specification (true) or single (false)."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "resourceSpecification.version",
            "description": "For filtering: ResourceSpecification version"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "resourceSpecification.name",
            "description": "For filtering: Name given to the ResourceSpecification"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "resourceSpecification.@type",
            "description": "For filtering: The (class) type of the ResourceSpecification"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "attachment.name",
            "description": "For filtering: name given to the attachment"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "attachment.@type",
            "description": "For filtering: Attachment class  type"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "attachment.uri",
            "description": "For filtering: Uniform Resource Identifier (URI) of the attachment"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "attachment.mimeType",
            "description": "For filtering: Attachment mime type such as extension file for video, picture and document"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "serviceSpecCharacteristic.name",
            "description": "For filtering: A word, term, or phrase by which this characteristic specification is known and distinguished from other characteristic specifications."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "serviceSpecCharacteristic.valueType",
            "description": "For filtering: A kind of value that the characteristic can take on, such as numeric, text and so forth"
          },
          {
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "serviceSpecCharacteristic.configurable",
            "description": "For filtering: If true, the Boolean indicates that the ServiceSpecCharacteristic is configurable"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "serviceSpecCharacteristic.@type",
            "description": "For filtering: (Class) type of the ServiceSpecCharacteristic"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "serviceSpecCharacteristic.@schemaLocation",
            "description": "For filtering: A link to the schema describing this characteristic"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "serviceSpecCharacteristic.@valueSchemaLocation",
            "description": "For filtering: This (optional) field provides a link to the schema describing the value type."
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "serviceSpecCharacteristic.minCardinality",
            "description": "For filtering: The minimum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where zero is the value for the minCardinality."
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "serviceSpecCharacteristic.maxCardinality",
            "description": "For filtering: The maximum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where five is the value for the maxCardinality."
          },
          {
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "serviceSpecCharacteristic.isUnique",
            "description": "For filtering: An indicator that specifies if a value is unique for the specification. Possible values are; \"unique while value is in effect\" and \"unique whether value is in effect or not\""
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "serviceSpecCharacteristic.regex",
            "description": "For filtering: A rule or principle represented in regular expression used to derive the value of a characteristic value."
          },
          {
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "serviceSpecCharacteristic.extensible",
            "description": "For filtering: An indicator that specifies that the values for the characteristic can be extended by adding new values when instantiating a characteristic for an Entity."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "relatedParty.role",
            "description": "For filtering: Role of the related party."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "relatedParty.name",
            "description": "For filtering: Name of the related party"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "serviceSpecRelationship.type",
            "description": "For filtering: Type of relationship such as migration, substitution, dependency, exclusivity"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "serviceSpecRelationship.role",
            "description": "For filtering: The association role for this service specification"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "serviceSpecRelationship.name",
            "description": "For filtering: The name given to the target service specification instance"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "targetServiceSchema.@type",
            "description": "For filtering: Class type of the target service"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "targetServiceSchema.@schemaLocation",
            "description": "For filtering: This field provides a link to the schema describing the target service"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/ServiceSpecification"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/serviceSpecification/{id}": {
      "get": {
        "operationId": "retrieveServiceSpecification",
        "summary": "Retrieves a 'ServiceSpecification' by Id",
        "tags": [
          "serviceSpecification"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Service Specification"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/ServiceSpecification"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/importJob": {
      "get": {
        "operationId": "listImportJob",
        "summary": "List or find 'ImportJob' objects",
        "tags": [
          "importJob"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "contentType",
            "description": "For filtering: Indicates the format of the imported data"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "path",
            "description": "For filtering: URL of the root resource where the content of the file specified by the import job must be applied"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "status",
            "description": "For filtering: Status of the import job (not started, running, succeeded, failed)"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "url",
            "description": "For filtering: URL of the file containing the data to be imported"
          },
          {
            "name": "completionDate",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: Date at which the job was completed"
          },
          {
            "name": "creationDate",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: Date at which the job was created"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "errorLog",
            "description": "For filtering: Reason for failure if status is failed"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/ImportJob"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "operationId": "createImportJob",
        "summary": "Creates a 'ImportJob'",
        "tags": [
          "importJob"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ImportJob_Create"
            },
            "required": true,
            "in": "body",
            "name": "importJob",
            "description": "The Import Job to be created"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ImportJob"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/importJob/{id}": {
      "get": {
        "operationId": "retrieveImportJob",
        "summary": "Retrieves a 'ImportJob' by Id",
        "tags": [
          "importJob"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Import Job"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/ImportJob"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/exportJob": {
      "get": {
        "operationId": "listExportJob",
        "summary": "List or find 'ExportJob' objects",
        "tags": [
          "exportJob"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "query",
            "description": "For filtering: Used to scope the exported data"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "path",
            "description": "For filtering: URL of the root resource acting as the source for streaming content to the file specified by the export job"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "contentType",
            "description": "For filtering: The format of the exported data"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "status",
            "description": "For filtering: Status of the export job (not started, running, succeeded, failed)"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "url",
            "description": "For filtering: URL of the file containing the data to be exported"
          },
          {
            "name": "completionDate",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: Data at which the job was completed"
          },
          {
            "name": "creationDate",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: Date at which the job was created"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "errorLog",
            "description": "For filtering: Reason for failure"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/ExportJob"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "operationId": "createExportJob",
        "summary": "Creates a 'ExportJob'",
        "tags": [
          "exportJob"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ExportJob_Create"
            },
            "required": true,
            "in": "body",
            "name": "exportJob",
            "description": "The Export Job to be created"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ExportJob"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/exportJob/{id}": {
      "get": {
        "operationId": "retrieveExportJob",
        "summary": "Retrieves a 'ExportJob' by Id",
        "tags": [
          "exportJob"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Export Job"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/ExportJob"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/hub": {
      "post": {
        "operationId": "registerListener",
        "summary": "Register a listener",
        "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": [
          "events subscription"
        ],
        "parameters": [
          {
            "name": "data",
            "schema": {
              "$ref": "#/definitions/EventSubscriptionInput"
            },
            "required": true,
            "in": "body",
            "description": "Data containing the callback endpoint to deliver the information"
          }
        ],
        "responses": {
          "201": {
            "description": "Subscribed",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/hub/{id}": {
      "delete": {
        "operationId": "unregisterListener",
        "summary": "Unregister a listener",
        "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": [
          "events subscription"
        ],
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "required": true,
            "in": "path",
            "description": "The id of the registered listener"
          }
        ],
        "responses": {
          "201": {
            "description": "Unsubscribed"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ServiceCatalog": {
      "type": "object",
      "description": "The root entity for service catalog management.\nA service catalog is a group of service specifications made available through service candidates that an organization provides to the consumers (internal consumers like its employees or B2B customers or B2C customers). \nA service catalog typically includes name, description and time period that is valid for. It will have a list of ServiceCandidate catalog items. A ServiceCandidate is an entity that makes a ServiceSpecification available to a catalog.\nA ServiceCandidate and its associated ServiceSpecification may be \"published\" - made visible -in any number of ServiceCatalogs, or in none.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the Catalog"
        },
        "href": {
          "type": "string",
          "description": "Unique reference of the catalog"
        },
        "name": {
          "type": "string",
          "description": "Name of the catalog"
        },
        "description": {
          "type": "string",
          "description": "Description of this catalog"
        },
        "@type": {
          "type": "string",
          "description": "Indicates the (class) type of catalog. For service catalogs, this will be 'ServiceCatalog'."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "Indicates<b> </b>the base (class) type of this REST resource"
        },
        "version": {
          "type": "string",
          "description": "Catalog version"
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The period for which the catalog is valid"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        }
      }
    },
    "ServiceCategory": {
      "type": "object",
      "description": "The (service) category resource is used to group service candidates in logical containers. Categories can contain other categories.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the category"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink reference to the category"
        },
        "name": {
          "type": "string",
          "description": "Name of the category"
        },
        "description": {
          "type": "string",
          "description": "Description of the category"
        },
        "@type": {
          "type": "string",
          "description": "The (class) type of this category"
        },
        "@schemalLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "Immediate base class type of this category"
        },
        "version": {
          "type": "string",
          "description": "Category version"
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The period for which the category is valid"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "parentId": {
          "type": "string",
          "description": "Unique identifier of the parent category"
        },
        "isRoot": {
          "type": "boolean",
          "description": "If true, this Boolean indicates that the category is a root of categories"
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedPartyRef"
          }
        },
        "serviceCandidate": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceCandidateRef"
          }
        },
        "category": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CategoryRef"
          }
        }
      }
    },
    "ServiceCandidate": {
      "type": "object",
      "description": "ServiceCandidate is an entity that makes a service specification available to a catalog. A\nServiceCandidate and its associated service specification may be published - made visible - in any number of service catalogs, or in none. One service specification can be composed of other service specifications.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of this REST resource"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink reference to this REST resource"
        },
        "name": {
          "type": "string",
          "description": "Name given to this REST resource"
        },
        "description": {
          "type": "string",
          "description": "Description of this REST resource"
        },
        "@type": {
          "type": "string",
          "description": "Class type of this REST resource"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "The (immediate) base class type of this REST resource"
        },
        "version": {
          "type": "string",
          "description": "the version of service candidate"
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The period for which this REST resource is valid"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update of this REST resource"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status of the service candidate."
        },
        "category": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CategoryRef"
          }
        },
        "serviceSpecification": {
          "$ref": "#/definitions/ServiceSpecificationRef"
        }
      }
    },
    "ServiceSpecification": {
      "type": "object",
      "description": "ServiceSpecification is a class that offers characteristics to describe a type of service.\nFunctionally, it acts as a template by which Services may be instantiated. By sharing the same  specification, these services would therefore share the same set of characteristics.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of this REST resource"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink reference to this REST resource"
        },
        "name": {
          "type": "string",
          "description": "Name given to this REST resource"
        },
        "description": {
          "type": "string",
          "description": "Description of this REST resource"
        },
        "@type": {
          "type": "string",
          "description": "Class type of this REST resource"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "The (immediate) base class type of this REST resource"
        },
        "version": {
          "type": "string",
          "description": "Service specification version"
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The period for which this REST resource is valid"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update of this REST resource"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status of the service specification"
        },
        "isBundle": {
          "type": "boolean",
          "description": "A flag indicates that if this service specification is a bundled specification (true) or single (false)."
        },
        "resourceSpecification": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceSpecificationRef"
          }
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Attachment"
          }
        },
        "serviceSpecCharacteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceSpecCharacteristic"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedPartyRef"
          }
        },
        "serviceSpecRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceSpecRelationship"
          }
        },
        "targetServiceSchema": {
          "$ref": "#/definitions/TargetServiceSchemaRef"
        }
      }
    },
    "ImportJob": {
      "type": "object",
      "description": "Represents a task used to import resources from a file",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of the import job"
        },
        "href": {
          "type": "string",
          "description": "Reference of the import job"
        },
        "contentType": {
          "type": "string",
          "description": "Indicates the format of the imported data"
        },
        "path": {
          "type": "string",
          "description": "URL of the root resource where the content of the file specified by the import job must be applied"
        },
        "status": {
          "type": "string",
          "description": "Status of the import job (not started, running, succeeded, failed)"
        },
        "url": {
          "type": "string",
          "description": "URL of the file containing the data to be imported"
        },
        "completionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date at which the job was completed"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date at which the job was created"
        },
        "errorLog": {
          "type": "string",
          "description": "Reason for failure if status is failed"
        }
      }
    },
    "ImportJob_Create": {
      "type": "object",
      "description": "Represents a task used to import resources from a file\nSkipped properties: id,href",
      "required": [
        "url"
      ],
      "properties": {
        "contentType": {
          "type": "string",
          "description": "Indicates the format of the imported data"
        },
        "path": {
          "type": "string",
          "description": "URL of the root resource where the content of the file specified by the import job must be applied"
        },
        "status": {
          "type": "string",
          "description": "Status of the import job (not started, running, succeeded, failed)"
        },
        "url": {
          "type": "string",
          "description": "URL of the file containing the data to be imported"
        },
        "completionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date at which the job was completed"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date at which the job was created"
        },
        "errorLog": {
          "type": "string",
          "description": "Reason for failure if status is failed"
        }
      }
    },
    "ExportJob": {
      "type": "object",
      "description": "Represents a task used to export resources to a file",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of the export job"
        },
        "href": {
          "type": "string",
          "description": "Reference of the export job"
        },
        "query": {
          "type": "string",
          "description": "Used to scope the exported data"
        },
        "path": {
          "type": "string",
          "description": "URL of the root resource acting as the source for streaming content to the file specified by the export job"
        },
        "contentType": {
          "type": "string",
          "description": "The format of the exported data"
        },
        "status": {
          "type": "string",
          "description": "Status of the export job (not started, running, succeeded, failed)"
        },
        "url": {
          "type": "string",
          "description": "URL of the file containing the data to be exported"
        },
        "completionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Data at which the job was completed"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date at which the job was created"
        },
        "errorLog": {
          "type": "string",
          "description": "Reason for failure"
        }
      }
    },
    "ExportJob_Create": {
      "type": "object",
      "description": "Represents a task used to export resources to a file\nSkipped properties: id,href",
      "required": [
        "url"
      ],
      "properties": {
        "query": {
          "type": "string",
          "description": "Used to scope the exported data"
        },
        "path": {
          "type": "string",
          "description": "URL of the root resource acting as the source for streaming content to the file specified by the export job"
        },
        "contentType": {
          "type": "string",
          "description": "The format of the exported data"
        },
        "status": {
          "type": "string",
          "description": "Status of the export job (not started, running, succeeded, failed)"
        },
        "url": {
          "type": "string",
          "description": "URL of the file containing the data to be exported"
        },
        "completionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Data at which the job was completed"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date at which the job was created"
        },
        "errorLog": {
          "type": "string",
          "description": "Reason for failure"
        }
      }
    },
    "TimePeriod": {
      "type": "object",
      "description": "A base / value business entity used to represent a period of time between two timepoints.",
      "properties": {
        "startDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "An instant of time, starting at the TimePeriod"
        },
        "endDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "An instant of time, ending at the TimePeriod."
        }
      }
    },
    "RelatedPartyRef": {
      "type": "object",
      "description": "RelatedParty reference. A related party defines party or party role linked to a specific entity.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of a related party"
        },
        "href": {
          "type": "string",
          "description": "Reference of the related party, could be a party reference or a party role reference"
        },
        "role": {
          "type": "string",
          "description": "Role of the related party."
        },
        "name": {
          "type": "string",
          "description": "Name of the related party"
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "Validity period of the related party"
        }
      }
    },
    "ServiceCandidateRef": {
      "type": "object",
      "description": "reference to ServiceCandidate object",
      "properties": {
        "id": {
          "type": "string",
          "description": "reference id to the target ServiceCandidate"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink reference to the target ServiceCandidate"
        },
        "version": {
          "type": "string",
          "description": "ServiceCandidate version"
        },
        "name": {
          "type": "string",
          "description": "Name given to the ServiceCandidate"
        },
        "@type": {
          "type": "string",
          "description": "The (class) type of the ServiceCandidate"
        }
      }
    },
    "CategoryRef": {
      "type": "object",
      "description": "Category reference. The category resource is used to group product offerings, service and resource candidates in logical containers. Categories can contain other categories and/or product offerings, resource or service candidates.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique reference of the category"
        },
        "href": {
          "type": "string",
          "description": "Unique reference of the category"
        },
        "version": {
          "type": "string",
          "description": "Category version"
        },
        "name": {
          "type": "string",
          "description": "Name of the category"
        }
      }
    },
    "ServiceSpecificationRef": {
      "type": "object",
      "description": "reference to  ServiceSpecification object",
      "properties": {
        "id": {
          "type": "string",
          "description": "reference id to the target ServiceSpecification"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink reference to the target ServiceSpecification"
        },
        "version": {
          "type": "string",
          "description": "ServiceSpecification version"
        },
        "name": {
          "type": "string",
          "description": "Name given to the ServiceSpecification"
        },
        "@type": {
          "type": "string",
          "description": "The (class) type of the ServiceSpecification"
        }
      }
    },
    "ResourceSpecificationRef": {
      "type": "object",
      "description": "Resource Specification reference: The ResourceSpecification is required to realize a ProductSpecification.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the resource specification"
        },
        "href": {
          "type": "string",
          "description": "Reference of the resource specification"
        },
        "name": {
          "type": "string",
          "description": "Name of the requiredResourceSpecification"
        },
        "version": {
          "type": "string",
          "description": "Resource specification version"
        }
      }
    },
    "Attachment": {
      "type": "object",
      "description": "Complements the description of an element (for instance a product) through video, pictures...",
      "properties": {
        "description": {
          "type": "string",
          "description": "A narrative text describing the content of the attachment"
        },
        "href": {
          "type": "string",
          "description": "Reference of the attachment"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the attachment"
        },
        "type": {
          "type": "string",
          "description": "Attachment type such as video, picture"
        },
        "url": {
          "type": "string",
          "description": "Uniform Resource Locator, is a web page address (a subset of URI)"
        }
      }
    },
    "ServiceSpecCharacteristic": {
      "type": "object",
      "description": "This class represents the key features of this service specification. For example, bandwidth is a characteristic of many different types of services; if bandwidth is a relevant characteristic (e.g., from the point-of-view of a Customer obtaining this Service via a Product) then bandwidth would be a ServiceSpecCharacteristic for that particular Service.",
      "properties": {
        "name": {
          "type": "string",
          "description": "A word, term, or phrase by which this characteristic specification is known and distinguished from other characteristic specifications."
        },
        "description": {
          "type": "string",
          "description": "A narrative that explains in detail what the ServiceSpecCharacteristic is"
        },
        "valueType": {
          "type": "string",
          "description": "A kind of value that the characteristic can take on, such as numeric, text and so forth"
        },
        "configurable": {
          "type": "boolean",
          "description": "If true, the Boolean indicates that the ServiceSpecCharacteristic is configurable"
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The period for which the ServiceSpecCharacteristic is valid"
        },
        "@type": {
          "type": "string",
          "description": "(Class) type of the ServiceSpecCharacteristic"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing this characteristic"
        },
        "@valueSchemaLocation": {
          "type": "string",
          "description": "This (optional) field provides a link to the schema describing the value type."
        },
        "minCardinality": {
          "type": "integer",
          "description": "The minimum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where zero is the value for the minCardinality."
        },
        "maxCardinality": {
          "type": "integer",
          "description": "The maximum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where five is the value for the maxCardinality."
        },
        "isUnique": {
          "type": "boolean",
          "description": "An indicator that specifies if a value is unique for the specification. Possible values are; \"unique while value is in effect\" and \"unique whether value is in effect or not\""
        },
        "regex": {
          "type": "string",
          "description": "A rule or principle represented in regular expression used to derive the value of a characteristic value."
        },
        "extensible": {
          "type": "boolean",
          "description": "An indicator that specifies that the values for the characteristic can be extended by adding new values when instantiating a characteristic for an Entity."
        },
        "serviceSpecCharacteristicValue": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceSpecCharacteristicValue"
          }
        },
        "serviceSpecCharRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceSpecCharRelationship"
          }
        }
      }
    },
    "ServiceSpecRelationship": {
      "type": "object",
      "description": "A migration, substitution, dependency or exclusivity relationship between/among service specifications.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of relationship such as migration, substitution, dependency, exclusivity"
        },
        "role": {
          "type": "string",
          "description": "The association role for this service specification"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of target ServiceSpecification"
        },
        "href": {
          "type": "string",
          "description": "Reference of the target ServiceSpecification"
        },
        "name": {
          "type": "string",
          "description": "The name given to the target service specification instance"
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The period for which the ServiceSpecRelationship is valid"
        }
      }
    },
    "TargetServiceSchemaRef": {
      "type": "object",
      "description": "The reference object to the schema and type of target service which is described by service specification",
      "properties": {
        "@type": {
          "type": "string",
          "description": "Class type of the target service"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing the target service"
        }
      }
    },
    "ServiceSpecCharacteristicValue": {
      "type": "object",
      "description": "A ServiceSpecCharacteristicValue object is used to define a set of attributes, each of which can be assigned to a corresponding set of attributes in a ServiceSpecCharacteristic object. The values of the attributes in the ServiceSpecCharacteristicValue object describe the values of the attributes that a corresponding ServiceSpecCharacteristic object can take on.",
      "properties": {
        "valueType": {
          "type": "string",
          "description": "A kind of value that the characteristic value can take on, such as numeric, text and so forth"
        },
        "isDefault": {
          "type": "boolean",
          "description": "If true, the Boolean Indicates if the value is the default value for a characteristic"
        },
        "value": {
          "$ref": "#/definitions/ServiceSpecCharacteristicValue",
          "description": "the  value that the characteristic can take on."
        },
        "unitOfMeasure": {
          "type": "string",
          "description": "A length, surface, volume, dry measure, liquid measure, money, weight, time, and the like. In general, a determinate quantity or magnitude of the kind designated, taken as a standard of comparison for others of the same kind, in assigning to them numerical values, as 1 foot, 1 yard, 1 mile, 1 square foot."
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The period of time for which a value is applicable."
        },
        "valueFrom": {
          "type": "integer",
          "description": "The low range value that a characteristic can take on"
        },
        "valueTo": {
          "type": "integer",
          "description": "The upper range value that a characteristic can take on"
        },
        "rangeInterval": {
          "type": "string",
          "description": "An indicator that specifies the inclusion or exclusion of the valueFrom and valueTo attributes. If applicable, possible values are \"open\", \"closed\", \"closedBottom\" and \"closedTop\"."
        },
        "regex": {
          "type": "string",
          "description": "A regular expression constraint for given value"
        },
        "@type": {
          "type": "string",
          "description": "The class type of the characteristic value"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Hyperlink reference to schema describing this object."
        }
      }
    },
    "ServiceSpecCharRelationship": {
      "type": "object",
      "description": "An aggregation, migration, substitution, dependency or exclusivity relationship between/among Specification Characteristics.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of relationship such as aggregation, migration, substitution, dependency, exclusivity"
        },
        "name": {
          "type": "string",
          "description": "Name of the target  characteristic"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the target specification"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink reference to the target specification"
        },
        "@type": {
          "type": "string",
          "description": "class type of target specification"
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The period for which the object is valid"
        }
      }
    },
    "EventSubscription": {
      "required": [
        "id",
        "callback"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of the listener"
        },
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      }
    },
    "EventSubscriptionInput": {
      "required": [
        "callback"
      ],
      "properties": {
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      }
    },
    "Error": {
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "description": "An integer coding the error type. This is given to caller so he can translate them if required."
        },
        "message": {
          "type": "string",
          "description": "A short localized string that describes the error."
        },
        "description": {
          "type": "string",
          "description": "(optional) A long localized error description if needed. It can contain precise information about which parameter is missing, or what are the identifier acceptable values."
        },
        "infoURL": {
          "type": "string",
          "description": "(optional) A URL to online documentation that provides more information about the error."
        }
      }
    }
  }
}